language: python
sudo: true

cache: pip

python:
  - "3.5"
  - "3.6"

services:
  - mysql

addons:
  postgresql: "9.4"

branches:
  only:
    - master

env:
  matrix:
   - DJANGO="django>=2.2,<2.3" DATABASE_URL='mysql://root@127.0.0.1/freeradius_test'
   - DJANGO="django>=2.2,<2.3" DATABASE_URL='postgres://postgres@127.0.0.1/freeradius_test'
   - DJANGO="django>=2.1,<2.2" DATABASE_URL='mysql://root@127.0.0.1/freeradius_test'
   - DJANGO="django>=2.1,<2.2" DATABASE_URL='postgres://postgres@127.0.0.1/freeradius_test'
   - SAMPLE_APP=1 DJANGO="django>=2.1,<2.2" DATABASE_URL='mysql://root@127.0.0.1/freeradius_test'
   - DJANGO="django>=2.0,<2.1" DATABASE_URL='sqlite:///django-freeradius.db'

before_install:
  - pip install -U pip wheel
  - pip install --no-cache-dir -U -r requirements-test.txt
  - ./runflake8
  - ./runisort
  - ./runcheckmigration
  - npm install -g jslint
  - jslint ./django_freeradius/static/django-freeradius/js/*.js
  - ./runsphinx-build

install:
  - pip install $DJANGO
  - python setup.py -q develop
  # Temporary: remove when openwisp-utils 0.3 is released
  - pip install -U https://github.com/openwisp/openwisp-utils/tarball/master

before_script:
  - if [ "$DATABASE_URL" == 'postgres://postgres@127.0.0.1/freeradius_test' ]; then psql -c "CREATE DATABASE freeradius_test;" -U postgres; fi
  - mysql -e "CREATE DATABASE IF NOT EXISTS freeradius_test;"
  - ./tests/manage.py migrate
  # ensure no migrations pending but show output for easier debugging
  - |
    if [[ $TRAVIS_PYTHON_VERSION == 3.4 && $SAMPLE_APP != "1" ]]; then
      OUTPUT=$(./tests/manage.py makemigrations --dry-run django_freeradius)
      echo $OUTPUT
      echo $OUTPUT | grep "No changes detected"
    fi

# command to run tests, e.g. python setup.py test
script:
  - coverage run --source=django_freeradius runtests.py
  - |
    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
      # gets commit message of last commit before pull request merge
      COMMIT_MESSAGE=$(git log $TRAVIS_PULL_REQUEST_SHA --format=%B -n 1)
      printf "Checking commit message:\n\n"
      printf "$COMMIT_MESSAGE\n\n"
      checkcommit --message "$COMMIT_MESSAGE"
    fi

after_success:
  coveralls
